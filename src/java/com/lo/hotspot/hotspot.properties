query.base.am=\
SELECT collector as count, collector, px, py from (\
    select \
        sum(count) as collector, \
        px, py \
    from (\
        select hot.*, round((longitude-(?))/(?-(?))*?) px, round(?-((latitude-(?))/(?-(?))*?)) py from LONE.hotspot_ambase hot\
    ) \
    where \
        longitude >= ? \
        and latitude >= ? \
        and longitude <= ? \
        and latitude <= ? \
    group by px, py \
) t
query.base=\
SELECT %count% as count, collector, px, py from (\
    select \
        COUNT(DISTINCT collector_key) as collector, SUM(SUM) as spend, SUM(unit_sum) as unit, SUM(transaction_count) as transactions, \
        px, py \
    from (\
        select hot.*, round((longitude-(?))/(?-(?))*?) px, round(?-((latitude-(?))/(?-(?))*?)) py from hotspot_%table% hot\
    ) \
    where \
        (transaction_date >= ? and transaction_date <= ?) \
        and longitude >= ? \
        and latitude >= ? \
        and longitude <= ? \
        and latitude <= ? \
        %subCondition% \
        %conditionValues% \
    group by px, py \
) t
query.base.sponsorKeyClause=and sponsor_key in (%sponsors%)
query.base.sponsorLocationClause=and sponsor_location in (%locations%)

# TODO: check query not collector based

query.conditionValues=\
    and collector_key in ( \
        select collector_key from \
            (\
                select collector_key, sponsor_key, sponsor_location, sum(count) count, sum(spend) spend, sum(unit) units  from universe \
                    where (TRANSACTION_DATE BETWEEN ? AND ?) \
                group by collector_key, sponsor_key, sponsor_location  \
            ) \
        where 1=1 %filters%)

# filter query for units, spend, transaction count hotspots
query.conditionValues.sumAnalysis.fragment=\
and collector_key in ( \
    select collector_key from ( \
       select collector_key, sum(spend1) s1, sum(spend2) s2, sum(units1) u1, sum(units2) u2, sum(txn1) t1, sum(txn2) t2 from \
        ((select collector_key, spend spend1, 0 spend2, unit units1, 0 units2, count txn1, 0 txn2 from UNIVERSE \
            WHERE TRANSACTION_DATE BETWEEN ? AND ? %subCondition%) \
        union all \
         (select collector_key, 0 spend1, spend spend2, 0 units1, unit units2, 0 txn1, count txn2 from UNIVERSE \
            WHERE TRANSACTION_DATE BETWEEN ? AND ? %subCondition%) \
        ) \
        group by collector_key) \
        where 1=1 %filters% \
)

query.conditionValues.filterFragment.spend.single=and spend >= ?
query.conditionValues.filterFragment.unit.single=and units >= ?
query.conditionValues.filterFragment.transaction.single=and count >= ?

query.conditionValues.filterFragment.spend=and s1 >= ? and s2 >= ?
query.conditionValues.filterFragment.unit=and u1 >= ? and u2 >= ?
query.conditionValues.filterFragment.transaction=and t1 >= ? and t2 >= ?

query.compare.base=\
    SELECT %count% AS COUNT, \
        longitude, \
        latitude, \
        collector_key \
    FROM \
      ( \
      SELECT \
        1 as collector, \
        SUM(SUM)                            AS spend, \
        SUM(unit_sum)                       AS unit, \
        SUM(transaction_count)              AS transactions, \
        longitude, \
        latitude, \
        collector_key \
      FROM hotspot_%table% \
      where \
        (transaction_date >= ? and transaction_date <= ?) \
        and longitude >= ? \
        and latitude >= ? \
        and longitude <= ? \
        and latitude <= ? \
        %subCondition% \
        %conditionValues% \
      GROUP BY collector_key, longitude, latitude \
    ) t
query.compare=\
select \
    count, \
    collector, \
    tilex, \
    tiley, \
    max(count) over (partition by 1) max, \
    min(count) over (partition by 1) min \
from ( \
    select  \
      SUM(count) count, \
      count(*) collector, \
      floor((longitude+20037508)/%ratio%) tilex, \
      floor((40075016-(latitude+20037508))/%ratio%) tiley \
    from \
    ( \
        select \
            %expression%, \
            NVL(q2.longitude, q1.longitude) longitude, \
            NVL(q2.latitude, q1.latitude) latitude \
        from \
            (%baseQuery%) q2 full outer join (%baseQuery%) q1 \
        on \
            q1.collector_key  = q2.collector_key \
            AND q1.longitude = q2.longitude \
            AND q1.latitude = q2.latitude \
    ) \
    group by \
        floor((longitude+20037508)/%ratio%), \
        floor((40075016-(latitude+20037508))/%ratio%) \
)
query.compare.blended=NVL(q2.count, 0)-NVL(q1.count, 0) as count
query.compare.growth=DECODE(SIGN(NVL(q2.count, 0)-NVL(q1.count, 0)), -1, 0, NVL(q2.count, 0)-NVL(q1.count, 0)) as count
query.compare.decline=DECODE(SIGN(NVL(q2.count, 0)-NVL(q1.count, 0)), 1, 0, NVL(q2.count, 0)-NVL(q1.count, 0)) as count 

query.compare.increase.color.r=0
query.compare.increase.color.g=0
query.compare.increase.color.b=255
query.compare.decrease.color.r=255
query.compare.decrease.color.g=0
query.compare.decrease.color.b=0
query.compare.neutral.color.r=255
query.compare.neutral.color.g=255
query.compare.neutral.color.b=0

#use either 1,2,4,8,16,32,64,256
#using 4 with threshold 10 will give us fixed real size of 500m for levels > 10
query.compare.tile.size=4
#tile size will increase AFTER that level, x2 per level
query.compare.zoomLevel.threshold=10
#spread of color linear|sqrt|log, sqrt seems to be the better method
query.compare.spread=sqrt
