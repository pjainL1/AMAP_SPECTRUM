package com.korem.openlayers.kms;

import com.korem.XMLHelper;
import com.korem.map.ws.search.client.FeatureResult;
import com.korem.map.ws.search.client.LayerResult;
import com.korem.map.ws.search.client.SearchResult;
import com.korem.openlayers.Bounds;
import com.korem.openlayers.IInfoFilter;
import com.korem.openlayers.IFilter;
import com.korem.openlayers.IMapProvider;
import com.korem.openlayers.parameters.IBoundsParameters;
import com.korem.openlayers.parameters.IBaseParameters;
import com.korem.openlayers.parameters.IDeviceBoundsParameters;
import com.korem.openlayers.parameters.IImageParameters;
import com.korem.openlayers.parameters.IInfoWithinRegion;
import com.korem.openlayers.parameters.IInitParameters;
import com.korem.openlayers.parameters.ILayerNameParameters;
import com.korem.openlayers.parameters.ILayerVisibilityParameters;
import com.korem.openlayers.parameters.ILonLatSelectionParameters;
import com.korem.openlayers.parameters.IMousePositionParameters;
import com.korem.openlayers.parameters.IPixelSelectionParameters;
import com.korem.openlayers.parameters.IPositionParameters;
import com.korem.openlayers.parameters.ISelectByAttributesParameters;
import com.lo.analysis.Analysis;
import com.lo.config.Confs;
import com.lo.layer.LocationLayerUtils;
import com.lo.util.WSClient;
import com.lo.util.WSClientLone;
import com.spinn3r.log5j.Logger;
import java.io.IOException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import javax.servlet.http.HttpServletResponse;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPathExpressionException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *
 * @author jduchesne
 */
public class MapProvider implements IMapProvider {

    private static final Logger log = Logger.getLogger();
    private static final String XPATH_MINX = "//coord[1]/X/text()";
    private static final String XPATH_MINY = "//coord[1]/Y/text()";
    private static final String XPATH_MAXX = "//coord[2]/X/text()";
    private static final String XPATH_MAXY = "//coord[2]/Y/text()";
    private Set<String> labelOnlyLayersName;
    private Map<String, String> labelOnlyLayers;

    public MapProvider() throws ParserConfigurationException {
        labelOnlyLayersName = new HashSet<String>();
        labelOnlyLayersName.add(Analysis.LOCATIONS.toString().toUpperCase());
        labelOnlyLayers = new HashMap<String, String>();
    }

    @Override
    public void removeMarker(IBaseParameters parameters, long uniqueId, String layerId) throws RemoteException {
        WSClient.getAnnotationService().removeFeature(parameters.mapInstanceKey(),
                layerId, String.valueOf(uniqueId));
    }

    @Override
    public byte[] getImage(String mapInstanceKey, String format, int width, int height) throws RemoteException {
        return WSClient.getMapService().getImage(mapInstanceKey, format, width, height);
    }

    @Override
    public void setBounds(IBoundsParameters parameters) throws RemoteException, SAXException, IOException, XPathExpressionException {
        WSClient.getMapService().setBounds(parameters.mapInstanceKey(),
                parameters.xmin(), parameters.ymin(),
                parameters.xmax(), parameters.ymax());
    }

    @Override
    public void writeImage(IImageParameters parameters, HttpServletResponse response) throws RemoteException, IOException {
        response.setContentType(parameters.format());
        byte[] image = null;
        try {
            image = getImage(
                    parameters.mapInstanceKey(), parameters.format(),
                    parameters.width(), parameters.height());
        } catch (Exception e) {
            log.error(null, e);
        }
        try {
            response.getOutputStream().write(image);
        } catch (Exception e) {
            log.error(null, e);
        }
    }

    @Override
    public void setDeviceBounds(IDeviceBoundsParameters parameters) throws RemoteException {
        WSClient.getMapService().setDeviceBounds(parameters.mapInstanceKey(), parameters.width(),
                parameters.height());
    }

    @Override
    public Bounds getBounds(IBaseParameters parameters) throws RemoteException, SAXException, IOException, XPathExpressionException, ParserConfigurationException {
        String boundsAsXML = WSClient.getMapService().getBounds(parameters.mapInstanceKey());
        Document doc = XMLHelper.get().newDocument(boundsAsXML);
        return new Bounds(getCoord(doc, XPATH_MINX), getCoord(doc, XPATH_MINY),
                getCoord(doc, XPATH_MAXX), getCoord(doc, XPATH_MAXY));
    }

    @Override
    public void removeSelection(IBaseParameters parameters) throws RemoteException {
        WSClient.getFeatureSetService().removeSelection(parameters.mapInstanceKey());
    }

    private String getCoord(Document doc, String xPathQuery) throws XPathExpressionException {
        return XMLHelper.get().getString(doc, xPathQuery);
    }
    
    public static void initWorkspaceProperties(String mapInstanceKey) throws RemoteException {
        WSClient.getMapService().setWorkspaceProperty(mapInstanceKey, "com.mapinfo.render.backgroundTransparency", "0");
    }

    @Override
    public void init(IInitParameters parameters) throws Exception {
        String mapInstanceKey = WSClient.getMappingSessionService().createMapInstanceKey(parameters.workspaceKey()); 
        initWorkspaceProperties(mapInstanceKey);
        parameters.setMapInstanceKey(mapInstanceKey);
        log.debug("workspaceKey [" + parameters.workspaceKey() + "] mapInstanceKey: " + mapInstanceKey);
        (new LocationLayerUtils()).createGlobalLocationLayer(parameters);
    }

    @Override
    public String getKeyFromWorspaceName(String workspaceName) throws Exception {
        return WSClient.getSystemService().stringEncode(workspaceName);
    }

    @Override
    public void clearSelection(IBaseParameters parameters) throws RemoteException {
        WSClient.getFeatureSetService().removeSelection(parameters.mapInstanceKey());
    }

    @Override
    public void setZoomAndCenter(IPositionParameters parameters) throws Exception {
        WSClient.getMapService().setZoomAndCenter(parameters.mapInstanceKey(), parameters.getZoom(),
                parameters.getLongitude(), parameters.getLatitude());
    }

    @Override
    public void setSelectionByAttributes(ISelectByAttributesParameters parameters) {
        try {
            WSClientLone.getFeatureSetService().setSelections(parameters.mapInstanceKey(), 
                    parameters.getLayerName(), parameters.getAttributeColumns(),
                    parameters.getAttributeValues(), false);
        } catch (RemoteException ex) {
            // exception is masked because it comes from "normal" utilisaton, aka target layer is empty.
            //log.debug("setSelectionByAttributes raised a remove exception.");
        }
    }

    @Override
    public String getLayerId(ILayerNameParameters parameters) throws Exception {
        String[] ids = WSClient.getMapService().getLayersIdByName(parameters.mapInstanceKey(), parameters.getLayerName());
        return (ids.length > 0) ? ids[0] : String.valueOf(0);
    }

    @Override
    public int setSelection(ILonLatSelectionParameters parameters) throws Exception {
        int resultCount = 0;
        for (String layerId : parameters.getLayerIds()) {
            try {
                if ((resultCount = WSClient.getFeatureSetService().setSelectionWithRegion(
                        parameters.mapInstanceKey(),
                        layerId,
                        parameters.getLonLatSelectionBounds(),
                        parameters.getSrsName(),
                        false)) > 0) {
                    break;
                }
            } catch (RemoteException e) {
                log.info(null, e);
            }
        }
        return resultCount;
    }

    @Override
    public int setSelection(IPixelSelectionParameters parameters, Boolean append) throws Exception {
        int resultCount = 0;
        try {
            String layerId = WSClient.getMapService().getLayersIdByName(parameters.mapInstanceKey(),
                    parameters.getLayerName())[0];
            WSClient.getFeatureSetService().setSelectionWithRegion(
                    parameters.mapInstanceKey(),
                    layerId,
                    parameters.getPixelSelectionBounds(),
                    append);
        } catch (RemoteException e) {
            log.info(null, e);
        }
        return resultCount;
    }

    @Override
    public Map<String, Collection<Map<String, Object>>> getInfo(IMousePositionParameters parameters, IFilter filter) throws Exception {
        SearchResult result = WSClient.getSearchService().searchAtPoint(
                parameters.mapInstanceKey(),
                parameters.x(),
                parameters.y());
        Map<String, Collection<Map<String, Object>>> infos = new LinkedHashMap<String, Collection<Map<String, Object>>>();
        for (LayerResult layerResult : result.getLayers()) {
            if (filter.isNeeded(layerResult)) {
                Collection<Map<String, Object>> layer = new ArrayList<Map<String, Object>>(layerResult.getResults().length);
                for (FeatureResult featureResult : layerResult.getResults()) {
                    Map<String, Object> info = new LinkedHashMap<String, Object>();
                    for (int i = 0; i < layerResult.getFeatureResultInfo().getColumnsInfo().length; ++i) {
                        String column = layerResult.getFeatureResultInfo().getColumnsInfo()[i].getName();
                        Object value = featureResult.getFeatureValues()[i].getValue();
                        info.put(column, value);
                    }
                    layer.add(info);
                }
                infos.put(layerResult.getName(), layer);
            }
        }
        WSClient.getMapService().setNumericCoordSys(parameters.mapInstanceKey(), Confs.STATIC_CONFIG.webCoordsysEpsg());
        
        return infos;
    }

    @Override
    public Collection<Map<String, Map<String, Object>>> getInfoWithinRegion(IInfoWithinRegion parameters, IInfoFilter filter) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public long addMarker(IPositionParameters parameters, String layerName, String label) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void viewEntireLayer(IBaseParameters parameters) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public Collection<Feature> getSelection(IBaseParameters parameters) throws Exception {
        try {
            String xml = WSClientLone.getFeatureSetService().getSelection(parameters.mapInstanceKey(), false);
            Document doc = XMLHelper.get().newDocument(xml);
            NodeList nodes = XMLHelper.get().getList(doc, "//MIFeature");
            Collection<Feature> features = new ArrayList<Feature>(nodes.getLength());
            for (int i = 0; i < nodes.getLength(); ++i) {
                features.add(new Feature((Element) nodes.item(i)));
            }
            return features;
        } catch (RemoteException remoteException) {
            log.error(null, remoteException);
        }
        return new LinkedList<Feature>();
    }

    @Override
    public Collection<Layer> getLayers(IBaseParameters parameters, IFilter filter) throws Exception {
        Document doc = XMLHelper.get().newDocument(WSClient.getMapService().getMapInfo(parameters.mapInstanceKey()));
        NodeList nodes = XMLHelper.get().getList(doc, "//LayerInterface");
        Collection<Layer> layers = new ArrayList<Layer>(nodes.getLength());
        for (int i = 0; i < nodes.getLength(); ++i) {
            Element el = (Element) nodes.item(i);
            Layer layer = new Layer(el,
                    Double.parseDouble(XMLHelper.get().getString(doc, "//MapZoom/text()")));
            if (filter == null || filter.isNeeded(layer)) {
//                log.debug(String.format("layer cntl - add layer [%s]", layer.getName()));
                layers.add(layer);
                String name = layer.getName().toUpperCase();
                if (labelOnlyLayersName.contains(name)) {
                    layer.setVisibilityBasedOnLabel(el);
                    
                    if (!labelOnlyLayers.containsKey(name)) {
                        labelOnlyLayers.put(layer.getId(), null);
                        
                        layer.getLabelFields().add("SPONSOR_LOCATION_CODE");
                        layer.getLabelFields().add("CUSTOMER_LOCATION_CODE");
                        layer.getLabelFields().add("SPONSOR_LOCATION_NAME");
                        
                        layer.getLabelDisplays().add("AM Loc. Code");
                        layer.getLabelDisplays().add("Loc. Number");
                        layer.getLabelDisplays().add("Location Name");
                    }
                }
        }
        }
        return layers;
    }

    @Override
    public boolean isLabelOnly(String value) throws Exception {
        return labelOnlyLayersName.contains(value.toUpperCase());
    }

    @Override
    public void setLabelVisibility(ILayerVisibilityParameters params) throws Exception {
        String layerID = WSClient.getMapService().getLayersIdByName(params.mapInstanceKey(), params.name())[0];
        
        if (layerID != null && !layerID.equals("-1")) {
            WSClientLone.getLayerService().setLabelVisibility(params.mapInstanceKey(), layerID, params.visibility(), params.getLabelField());
        }
    }

    @Override
    public void setLayerVisibility(ILayerVisibilityParameters params) throws Exception {
        WSClient.getLayerService().setVisible(params.mapInstanceKey(), params.id(), params.visibility());
    }
}
